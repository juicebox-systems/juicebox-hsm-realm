//! Entrust specific types dealing with initialization and startup of the hsm implementation.

#![no_std]

extern crate alloc;

use alloc::{string::String, vec::Vec};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum EntrustRequest {
    Initialize(InitializeRequest),
    Start(StartRequest),
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum EntrustResponse {
    Initialize(InitializeResponse),
    Start(StartResponse),
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct InitializeRequest {
    pub noise_private_key: Ticket,
    pub noise_public_key: Ticket,
    pub hmac_key: Ticket,
}

/// A Ticket for gaining accessing to a key, as generated by Cmd_GetTicket.
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Ticket(pub Vec<u8>);

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum InitializeResponse {
    Ok,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct StartRequest {
    pub tree_overlay_size: u16,
    pub max_sessions: u16,
}

impl Default for StartRequest {
    fn default() -> Self {
        Self {
            tree_overlay_size: 511,
            max_sessions: 511,
        }
    }
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum StartResponse {
    Ok,
    PersistenceError(String),
}
