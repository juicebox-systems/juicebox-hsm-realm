# This is based on
# <https://github.com/ongardie/cubicle/blob/b307fe9/.github/workflows/main.yaml>
# with Diego's permission.  The initial workflow YAML skeleton before that was
# based on
# <https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml>
# and
# <https://github.com/ramosbugs/oauth2-rs/blob/main/.github/workflows/main.yml>.
#
# GitHub Actions workflow syntax documentation is here:
# <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions>.
name: CI

on:
  pull_request: {}
  push:
    branches:
    - main
  workflow_dispatch: {}

env:
  # Configures Cargo to use the CLI `git`, which is configured to access
  # private repos. See
  # <https://doc.rust-lang.org/cargo/appendix/git-authentication.html>.
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"

jobs:
  rust_ppc:
    name: Build PPC
    runs-on: ubuntu-20.04
    steps:
    - name: Check out sources
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Set up Git
      run: |
        # Configures the global `git` CLI to be able to access private repos.
        # `cargo` will make use of this.
        git config --global url.'https://github.com/'.insteadOf 'ssh://git@github.com/'
        # Copy the encoded auth token from local config that actions/checkout configured.
        git config --global http.'https://github.com/'.extraHeader "$(git config --local http.'https://github.com/'.extraHeader)"

    - name: Free up some space on image
      # see https://github.com/actions/runner-images/issues/2840
      run: |
        sudo rm -rf /usr/share/dotnet
      shell: bash

    - name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: false
        components: rust-src

    - name: Install PowerPC cross-compile dependencies
      run: sudo apt install qemu qemu-user qemu-user-binfmt gcc-9-powerpc-linux-gnu

    - name: Cross Compile PowerPC
      run: ./build-ppc.sh

    - name: Run unit tests on PowerPC
      run: ./test-ppc.sh

  rust_x86:
    name: Build x86 + Demo
    runs-on: ubuntu-20.04
    steps:
    - name: Check out sources
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Set up Git
      run: |
        # Configures the global `git` CLI to be able to access private repos.
        # `cargo` will make use of this.
        git config --global url.'https://github.com/'.insteadOf 'ssh://git@github.com/'
        # Copy the encoded auth token from local config that actions/checkout configured.
        git config --global http.'https://github.com/'.extraHeader "$(git config --local http.'https://github.com/'.extraHeader)"

    - name: Free up some space on image
      # see https://github.com/actions/runner-images/issues/2840
      run: |
        sudo rm -rf /usr/share/dotnet
      shell: bash

    - name: Install Rust stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Use Go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Use Go path
      # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Install Bigtable tools
      run: |
        command -V emulator || go install cloud.google.com/go/bigtable/cmd/emulator@latest

    - name: Install Protobuf Compiler
      run: sudo apt install protobuf-compiler

    - name: Use Rust Cache
      uses: Swatinem/rust-cache@v2

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Run demo
      run: |
        RUST_BACKTRACE=1 cargo run --bin demo_runner -- --demo target/debug/demo
      shell: bash

  swift_demo:
    name: Swift Demo
    runs-on: macOS-latest
    steps:
    - name: Check out sources
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Set up Git
      run: |
        # Configures the global `git` CLI to be able to access private repos.
        # `cargo` will make use of this.
        git config --global url.'https://github.com/'.insteadOf 'ssh://git@github.com/'
        # Copy the encoded auth token from local config that actions/checkout configured.
        git config --global http.'https://github.com/'.extraHeader "$(git config --local http.'https://github.com/'.extraHeader)"

    - name: Free up some space on image
      # see https://github.com/actions/runner-images/issues/2840
      run: |
        sudo rm -rf /usr/share/dotnet
      shell: bash

    - name: Install Rust stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Use Go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Use Go path
      # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Install Bigtable tools
      run: |
        rm /Users/runner/Library/Android/sdk/tools/emulator || true
        command -V emulator || go install cloud.google.com/go/bigtable/cmd/emulator@latest

    - name: Install Protobuf Compiler
      run: brew install protobuf

    - name: Use Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          .
          sdk

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Build FFI
      run: cd sdk && ./swift/ffi.sh

    - name: Use Swift Cache
      uses: actions/cache@v3
      with:
        path: sdk/swift/demo/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build Swift Demo
      run: cd sdk/swift/demo && swift build --verbose

    - name: Run demo
      run: |
        RUST_BACKTRACE=1 cargo run --bin demo_runner -- --demo sdk/swift/demo/.build/debug/demo
      shell: bash

  lint_and_test:
    name: Lint & Test
    runs-on: ubuntu-20.04
    steps:
    - name: Check out sources
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Set up Git
      run: |
        # Configures the global `git` CLI to be able to access private repos.
        # `cargo` will make use of this.
        git config --global url.'https://github.com/'.insteadOf 'ssh://git@github.com/'
        # Copy the encoded auth token from local config that actions/checkout configured.
        git config --global http.'https://github.com/'.extraHeader "$(git config --local http.'https://github.com/'.extraHeader)"

    - name: Install Rust stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        components: rustfmt, clippy
        override: 'true'
        profile: minimal
        toolchain: stable

    - name: Use Go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Use Go path
      # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Install Bigtable tools
      run: |
        command -V emulator || go install cloud.google.com/go/bigtable/cmd/emulator@latest

    - name: Install Protobuf Compiler
      run: sudo apt install protobuf-compiler

    - name: Use Rust Cache
      uses: Swatinem/rust-cache@v2

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        # binary needed for integration tests
        args: --package load-balancer --bin load-balancer
        command: build

    - name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        args: --workspace --exclude 'entrust-*'
        command: test
      env:
        RUST_BACKTRACE: '1'

    - name: Run cargo fmt
      uses: actions-rs/cargo@v1
      with:
        args: --all -- --check
        command: fmt

    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        args: --workspace --tests -- -D warnings
        command: clippy

    - name: Install cargo audit
      uses: actions-rs/cargo@v1
      with:
        args: cargo-audit
        command: install

    - name: Run cargo audit
      uses: actions-rs/cargo@v1
      with:
        command: audit

  wasm_demo:
    name: WASM Demo
    runs-on: ubuntu-20.04
    steps:
    - name: Check out sources
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Set up Git
      run: |
        # Configures the global `git` CLI to be able to access private repos.
        # `cargo` will make use of this.
        git config --global url.'https://github.com/'.insteadOf 'ssh://git@github.com/'
        # Copy the encoded auth token from local config that actions/checkout configured.
        git config --global http.'https://github.com/'.extraHeader "$(git config --local http.'https://github.com/'.extraHeader)"

    - name: Install Rust stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Use Go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/go/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Use Go path
      # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Install Bigtable tools
      run: |
        command -V emulator || go install cloud.google.com/go/bigtable/cmd/emulator@latest

    - name: Install Protobuf Compiler
      run: sudo apt install protobuf-compiler

    - name: Use Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          .
          sdk

    - uses: actions/setup-node@v3
      with:
        # it's not possible to pin certs yet with the experimental fetch in node 18,
        # and our polyfill doesn't work well in 18. stick with 16 for now.
        node-version: 16

    - uses: jetli/wasm-pack-action@v0.4.0

    - name: Build WASM
      run: wasm-pack build sdk/rust/bridge/wasm --out-dir ../../../javascript/loam-sdk --out-name loam-sdk --target nodejs

    - name: NPM Install
      run: |
        cd sdk/javascript/demo
        npm install
        npm install -g ts-node

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Run demo
      run: |
        RUST_BACKTRACE=1 cargo run --bin demo_runner -- --demo sdk/javascript/demo/demo.ts
      shell: bash
