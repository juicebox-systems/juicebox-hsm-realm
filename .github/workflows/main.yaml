# This is based on
# <https://github.com/ongardie/cubicle/blob/b307fe9/.github/workflows/main.yaml>
# with Diego's permission.  The initial workflow YAML skeleton before that was
# based on
# <https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml>
# and
# <https://github.com/ramosbugs/oauth2-rs/blob/main/.github/workflows/main.yml>.
#
# GitHub Actions workflow syntax documentation is here:
# <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions>.
name: CI

on:
  pull_request: {}
  push:
    branches:
    - main
  workflow_dispatch: {}

env:
  INSTALL_RUST_VERSION: "1.75"

jobs:
  rust_ppc:
    name: Build PPC
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
    - name: Check out sources
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Free up some space on image
      # see https://github.com/actions/runner-images/issues/2840
      run: |
        sudo rm -rf /usr/share/dotnet
      shell: bash

    - name: Install Rust with source
      uses: actions-rs/toolchain@v1
      with:
        components: rust-src
        default: true
        profile: minimal
        toolchain: ${{ env.INSTALL_RUST_VERSION }}

    - name: Install PowerPC cross-compile dependencies
      run: sudo apt update && sudo apt install qemu-user qemu-user-binfmt gcc-12-powerpc-linux-gnu

    - name: Cross Compile PowerPC
      run: ./build-ppc.sh

    - name: Run unit tests on PowerPC
      run: ./test-ppc.sh

  cross_version_sdk:
    # runs the latest realm code built with its particular sdk version
    # with a client built from a specific sdk release.
    name: SDK Cross version test
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        sdk_version: ["0.3.0", "main"]
    steps:
    - name: Check out hsm sources
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Check out sdk client sources
      uses: actions/checkout@v4
      with:
        repository: "juicebox-systems/juicebox-sdk"
        ref: ${{ matrix.sdk_version }}
        path: "sdk_client"
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: setup environment
      uses: ./.github/actions/setup
      with:
        rust_version: ${{ env.INSTALL_RUST_VERSION }}

    - name: build realm
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Build client
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --manifest-path sdk_client/rust/cli/demo/Cargo.toml

    - name: Run demo
      run: |
        RUST_BACKTRACE=1 target/debug/demo_runner --demo sdk_client/target/debug/demo
      shell: bash

  cross_version_hsm:
        # Runs the latest realm code against an older version of the software HSM
        # This helps ensure we move the agent code forward without breaking compatability
        # with the deployed and un-updatable hsm code.
        name: HSM Cross version test
        # Use same runner as Lint & Test. See comment there.
        runs-on: ubuntu-latest-m
        timeout-minutes: 20
        strategy:
          matrix:
            # Transfer Coordinator (PR #401) changes hsm_api::StatusResponse.
            hsm_version: ["fdd7caafd95724ca6449af84f7658a9d92660cd5"]
        steps:
        - name: Check out sources
          uses: actions/checkout@v4
          with:
            submodules: recursive
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Check out versioned hsm
          uses: actions/checkout@v4
          with:
            ref: ${{ matrix.hsm_version }}
            path: "versioned_hsm"
            submodules: recursive
            token: ${{ secrets.ACCESS_TOKEN }}

        - name: Setup environment
          uses: ./.github/actions/setup
          with:
            rust_version: ${{ env.INSTALL_RUST_VERSION }}

        - name: Build versioned software HSM
          uses: actions-rs/cargo@v1
          with:
            command: build
            args: --manifest-path versioned_hsm/Cargo.toml -p software_hsm

        - name: Build realm
          uses: actions-rs/cargo@v1
          with:
            command: build

        - name: Run realm tests with versioned software HSM
          uses: actions-rs/cargo@v1
          with:
            command: test
          env:
            RUST_BACKTRACE: '1'
            SOFTWARE_HSM_DIR: ${{ github.workspace }}/versioned_hsm/target/debug

  swift_demo:
    name: Swift Demo
    # macos-12-large is an Intel x86_64-based runner with 12 vCPUs, 30 GB RAM,
    # and 14 GB SSD running Mac OS 12.
    #
    # The default macos-12 runner (with 3 vCPUs) was overloaded during this
    # test (experiencing lots of timeout issues), so we switched to a larger
    # runner in 2023-11.
    #
    # Currently, the macos-13 runners (in beta) don't include Colima or Go, and
    # installing Colima with brew takes a few minutes. Using an ARM-based
    # runner (macos-13-xlarge) would be nice for coverage on that architecture,
    # but even after installing Colima with brew, Colima fails to start (as of
    # 2023-11).
    runs-on: macos-12-large
    timeout-minutes: 20
    steps:
    - name: Check out sources
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Setup docker
      # Colima is a container runtime. It's part of the base MacOS 12 github
      # runner image but not MacOS 13 (as of 2023-11).
      shell: bash
      run: |
        brew install docker
        colima version
        colima start

    - name: Remove android emulator
      # This is on the path and clashes with the bigtable emulator which is also
      # called emulator.
      shell: bash
      run: |
        rm /Users/runner/Library/Android/sdk/tools/emulator || true

    - name: Setup environment
      uses: ./.github/actions/setup
      with:
        rust_version: ${{ env.INSTALL_RUST_VERSION }}

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Build FFI
      run: cd sdk && ./swift/ffi.sh

    - name: Use Swift Cache
      uses: actions/cache@v3
      with:
        path: sdk/swift/demo/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build Swift Demo
      run: cd sdk/swift/demo && swift build --verbose

    - name: Run demo
      run: |
        RUST_BACKTRACE=1 target/debug/demo_runner --minimal --demo sdk/swift/demo/.build/debug/demo
      shell: bash

  lint_and_test:
    name: Lint & Test
    # The tests are resource intensive and may benefit from a slightly larger
    # runner. As of 2023-11, "ubuntu-latest-m" is a runner configured in our
    # organization meaning Ubuntu 22.04 with 4 cores, 16 GB RAM, 150 GB SSD.
    # For comparison, the standard runners are 2 cores, 7 GB RAM, 14 GB SSD.
    runs-on: ubuntu-latest-m
    timeout-minutes: 20
    steps:
    - name: Check out sources
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: setup environment
      uses: ./.github/actions/setup
      with:
        rust_version: ${{ env.INSTALL_RUST_VERSION }}

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Print build info
      run: target/debug/load_balancer --version

    - name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        args: --workspace --exclude 'entrust*' --package entrust_ops
        command: test
      env:
        RUST_BACKTRACE: '1'

    - name: Run cargo fmt
      uses: actions-rs/cargo@v1
      with:
        args: --all -- --check
        command: fmt

    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        args: --workspace --tests --exclude 'entrust*' --package entrust_ops -- -D warnings
        command: clippy

    - name: Install graphviz
      run: sudo apt install graphviz

    - name: Delete Merkle tree paper outputs
      run: |
        rm -r docs/merkle_tree/
        git restore --source HEAD \
          docs/merkle_tree/intro/system.dot \
          docs/merkle_tree/intro/stacked_box.png \
          docs/merkle_tree/storage/base128.dot \
          docs/merkle_tree/merkle.typ \
          docs/merkle_tree/references.bib \
          docs/merkle_tree/template.typ \
          docs/merkle_tree/to_tree.py

    - name: Compile Merkle tree paper
      uses: actions-rs/cargo@v1
      with:
        command: run
        args: --package merkle_tree_docgen

    - name: Check Merkle tree paper outputs
      run: git diff --exit-code -- docs/merkle_tree

    - name: Run Merkle tree paper Python
      run: python3 docs/merkle_tree/to_tree.py

    - name: Check SDK dependency versions agree
      run: ./scripts/check-sdk-deps.py

  wasm_demo:
    name: WASM Demo
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
    - name: Check out sources
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: setup environment
      uses: ./.github/actions/setup
      with:
        rust_version: ${{ env.INSTALL_RUST_VERSION }}

    - uses: actions/setup-node@v3
      with:
        # it's not possible to pin certs yet with the experimental fetch in node 18,
        # and our polyfill doesn't work well in 18. stick with 16 for now.
        node-version: 16

    - uses: jetli/wasm-pack-action@v0.4.0

    - name: Build WASM
      run: wasm-pack build sdk/rust/sdk/bridge/wasm --out-dir ../../../../javascript/juicebox-sdk --out-name juicebox-sdk --target nodejs

    - name: NPM Install
      run: |
        cd sdk/javascript/demo
        npm install
        npm install -g ts-node

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build

    - name: Run demo
      run: |
        RUST_BACKTRACE=1 target/debug/demo_runner --demo sdk/javascript/demo/demo.ts
      shell: bash

  entrust:
    name: Build Entrust
    runs-on: ubuntu-latest-m
    timeout-minutes: 20
    steps:
    - name: Check out sources
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        components: clippy, rustfmt, rust-src
        default: true
        profile: minimal
        toolchain: ${{ env.INSTALL_RUST_VERSION }}

    - name: Use Rust Cache
      uses: Swatinem/rust-cache@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

    - name: Download Codesafe from Google Cloud Storage
      run: |
        gcloud storage cp 'gs://ncipher-nshield-firmware/2023-08 v13.4 codesafe firmware secworld/Codesafe_Lin64-13.4.3.iso.zip' .
        echo '7d6eaff0548d90143d35834f1ea1cf092321e9003e10e14895a01a6f412adadb  Codesafe_Lin64-13.4.3.iso.zip' | sha256sum -c -

    - name: Install Codesafe
      run: |
        unzip Codesafe_Lin64-13.4.3.iso.zip
        7z e Codesafe_Lin64-13.4.3.iso linux/amd64/csd.tar.gz
        sudo tar -C / -xf csd.tar.gz
        rm Codesafe_Lin64-13.4.3.iso.zip Codesafe_Lin64-13.4.3.iso csd.tar.gz

    - name: Run clippy (entrust* crates)
      uses: actions-rs/cargo@v1
      with:
        args: --tests --package 'entrust*' -- -D warnings
        command: clippy

    - name: Run cargo build (entrust* crates)
      uses: actions-rs/cargo@v1
      with:
        args: --package 'entrust*'
        command: build

    - name: Run cargo test (entrust* crates)
      uses: actions-rs/cargo@v1
      with:
        args: --package 'entrust*'
        command: test
      env:
        RUST_BACKTRACE: '1'

    - name: Run release build
      uses: actions-rs/cargo@v1
      with:
        args: --all --release
        command: build

    - name: Run cargo build (PPC entrust_hsm.elf)
      run: ./entrust_hsm/compile_linux.sh
